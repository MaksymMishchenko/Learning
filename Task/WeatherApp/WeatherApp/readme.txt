Задача:

С помощью патерна проектирования Наблюдатель реализовать сервис погоды, на которого будет возможность подписаться и отписаться подписчикам для получения информации о погоде.
При изменении погодных условий подписчики получают уведомления об изменениях в погоде.

Решение:

-1. Создаем модель погоды, в которой будут свойства: город, температура, влажность, осадки и структура DateTime - текущее время.
-2. Создаем класс-издатель, который будет содержать список подписчиков и метод добавления нового подписчика в лист и реализует интерфейс IObservable<Wheather>
-3. Создаем класс-подписчик, и реализуем интерфейс IObserver<Weather>. В классе создаем метод Notify(), который будет уведомлять подписчиков об обновлениях погоды.
-4. Метод Subscribe в классе-издателе должен возвращать экземпляр класса, который реализует интерфейс IDisposable. Создаем класс Unsubscriber и реализуем интерфейс IDisposable.
-5. Метод Dispose() проверяет наличие подписчика в базе, и если он есть,то отписывает его от рассылки издателя. Для этого нам потребуется ссылка на список подписчиков и сам подписчик, поля которых мы проинициализируем в контрукторе.
-6. В методе Subscribe вернем экземпляр класса Unsubscribe и в конструктор передадим ссылки на список подписчиков и подписчика.

Как использовать:

-1. Создаем экземпляр класса-издателя;
-2. Создаем три экземпляра класса-подпиcчиков дав им имена;
-3. Создаем экземпляры погоды для 3-х городов;
-4. Подписываем подписчиков на событие изменения в погоде. Данный метод вернет экземпляр класса IDisposable, результат присваиваем в переменную.
-5. С помощью переменной типа IDisposable мы сможем анулировать подписку пользователя, вызвав у подписчика метод Dispose().
-6. Вызываем метод Notify() и указываем подписчика, которого нужно уведомить.