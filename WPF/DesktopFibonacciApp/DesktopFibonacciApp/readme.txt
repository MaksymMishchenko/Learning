Задание
Создайте проект по шаблону "WPF". Переместите из элементов управления (ToolBox) на форму
два текстовых поля (TextBox) и кнопку (Button). Дайте имена для ваших элементов управления,
чтобы к ним можно было обращаться из кода. Например, текстовое поле 1 – txtResult, текстовое
поле 2 - txtLoop, а кнопка – btnStart.
Перенесите в это приложение метод FindLastFibonacciNumber из домашнего задания #4
предыдущего урока. Создайте и зарегистрируйте обработчик события по нажатию на кнопку
btnStart. Он должен создать и запустить задачу, которая будет выполнять метод
FindLastFibonacciNumber. Так как эта операция займет много времени, вам нужно использовать
флаг TaskCreationOptions.LongRunning, чтобы задача выполнялась в контексте потока выполнения
Thread и не занимала потоки из пула. Результат асинхронной задачи необходимо вывести в
текстовое поле txtResult. Сделайте это с помощью продолжения.
Помните, что к элементам управления можно обращаться только из потоков, в которых они были
созданы. Поэтому выполните продолжение с помощью планировщика задач
SynchronizationContextTaskScheduler. Его можно получить из статического метода
TaskScheduler.FromCurrentSynchronizationContext().

Решение:
+1. Нанести на форму два текстовых поля и кнопку Start, дать соответсвующие имена txtResult, txtLoop, btnStart;
+2. По нажатию на кнопку Start в методе-обработчике запустить метод FindLastFibonacciNumber в контексте вторичного потока Task используя флаг-перечисление TaskCreationOptions.LongRunning;
+3. На экземпляре задачи вызвать метод ContinueWith(), в который передать лямбда-выражение состоящее из присваивания текстовому полю txtResult возвращаемое значения задачи;
+4. В методе ContinueWith() передать возвращаемое значение через Dispatcher.Invoke(). 