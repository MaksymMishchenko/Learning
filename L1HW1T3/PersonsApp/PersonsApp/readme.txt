Задание 3
Создайте абстрактный класс Гражданин. Создайте классы Студент, Пенсионер, Рабочий
унаследованные от Гражданина. Создайте непараметризированную коллекцию со следующим
функционалом:
1. Добавление элемента в коллекцию.
1) Можно добавлять только Гражданина.
2) При добавлении, элемент добавляется в конец коллекции. Если Пенсионер, – то в
начало с учетом ранее стоящих Пенсионеров. Возвращается номер в очереди.
3) При добавлении одного и того же человека (проверка на равенство по номеру
паспорта, необходимо переопределить метод Equals и/или операторы равенства для
сравнения объектов по номеру паспорта) элемент не добавляется, выдается
сообщение.
2. Удаление
1) Удаление – с начала коллекции.
2) Возможно удаление с передачей экземпляра Гражданина.
3. Метод Contains возвращает true/false при налчичии/отсутствии элемента в коллекции и
номер в очереди.
4. Метод ReturnLast возвращsает последнего чеолвека в очереди и его номер в очереди.
5. Метод Clear очищает коллекцию.
6. С коллекцией можно работать опертаором foreach.

Решение:
-1. Создать абстрактный класс Citizen;
-2. Создать классы Student, Retired, Worker. Создать свойства Name, Age, PassportId
-3. Создать класс Collection, который реализует интерфейсы IEnumerable, IEnumerator
-4. В теле класса создать массив типа Citizen;
-5. Создать метод Add(Citizen citizen), который принимает в качестве параметра тип Citizen:
   - перед добавление проверить на равенство, нет ли такого человека в коллекции. Если есть, то пробрасываем исключение, что такой гражданин уже есть в коллекции;
   - создать новый массив с размером старого массива +1;
   - на старом массиве вызываем метод CopyTo, последнего добавляем в конец коллекции присваивая значение параметра новому массиву;
   - в конструкции if проверяем, если Citizen является Retired, то добавляем в коллекцию в начало с учетом всех предыдущих пенсионеров;
   - после добавления в коллекции выводим индекс - порядковый номер гражданина в очереди;
-6. Создать метод Remove(Citizen citizen) который удаляет гражданина с начала коллекциию.
-7. Создать метод Contains, в конструкции for пройтись по коллекции. Если элемент есть в наличии, возвращаем true и индекс - порядковый номер элемента;
-8. Создать метод ReturnLast, который обращается к последнему элементу коллекции, возвращает последний элемент и индекс;
-9. Создать метод Clear, который присваивает массиву значение пустого;
-10. Реализовываем члены Current, MoveNext, Reset, GetEnumerator;
-11. В методе Main() создаем экземпляры классов Collection, Student, Retired, Worker. В блоке инициализатора добавляем данные граждан.
