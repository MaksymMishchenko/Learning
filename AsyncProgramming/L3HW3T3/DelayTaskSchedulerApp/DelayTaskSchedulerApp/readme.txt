Задание 3
Создайте проект по шаблону "Console Application". Создайте свой планировщик задач,
производный от класса TaskScheduler с названием DelayTaskScheduler. Ваш планировщик будет
выполнять задачи с задержкой в 2 секунды. То есть, при запуске задачи, она должна подождать 2
секунды прежде, чем запустится. Для решения такой ситуации можно воспользоваться классом
Timer или методом ThreadPool.RegisterWaitForSingleObject(), которые позволят вам выполнить
вашу задачу в контексте пула потоков, но при этом с задержкой, указанной вами.
Не забудьте заглушить абстрактный метод TryExecuteTaskInline (необходимо просто всегда
возвращать false). Из-за задержки в выполнении, задача может часто пытаться выполнится
синхронно к потоку вызова.
Создайте задачу, которая выведет на экран консоли в каком потоке она отработала и являлся ли
он потоком из пула потоков (для этого используйте свойство -
Thread.CurrentThread.IsThreadPoolThread). После этого запустите задачу в контексте вашего
планировщика DelayTaskScheduler. После создайте цикл while и, при условии, что свойство
IsCompleted вашей задачи возвращает false, выводите на экран консоли звездочку с задержкой в
100 миллисекунд.
Код примерно такой:
while (task.IsCompleted == false)
{
Console.Write($"* ");
Thread.Sleep(100);
}
Если вы указали, что задачи должны выполнятся с задержкой в 2 секунды, то у вас должно быть
выведено на экран консоли 20 звездочек.

Решение:
+1. Создать планировщик DelayTaskScheduler, отнаследоваться от класса TaskScheduler, имплементировать абстрактные методы;
+2. Создаем список задач, в методе QueueTask добавляем в список переданные задачи;
+3. Создаем делегат WaitOrTimerCallBack и в лямбда-выражении сообщаем с ним метод из базового класса TaskScheduler TryExecuteTask() параметрах передаем задачи из списка;
+4. На классе-объекте Thread вызываем метод RegisterWaitForSingleObject()
+5. Создаем метод который будет выполняться асинхронно;
+6. запускаем его асинхронно и в метод Start() передаем экземпляр планировщика.