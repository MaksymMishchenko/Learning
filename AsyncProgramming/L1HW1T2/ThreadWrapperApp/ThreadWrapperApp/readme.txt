Задание 2
Создайте проект по шаблону "Console Application". Создайте класс-обертку для работы с классом
Thread. Класс-обертка, должен позволить выполнить экземпляр класса-делегата Action<object>
в контексте потока, созданного классом Thread. Он должен быть наделен свойствами bool
IsCompleted (для проверки на завершенность выполнения метода), bool IsSuccess (для проверки
на успешность выполнения), bool IsFaulted (для проверки на провал выполнения) и Exception
типа Exception (для получения исключения, которое произошло в контексте вторичного потока).
Реализуйте также методы Start и Wait. Метод Start будет запускать экземпляр класса-делегата
Action<object> на выполнение в контексте потока Thread. Метод Wait будет усыплять поток,
который его вызвал, пока класс-делегат Action<object> не завершит свою работу.
По завершению выполнения нужно присвоить свойству IsCompleted - true. Если выполнение
произошло без ошибок, свойству IsSuccess присвоить true, в противном случае - свойству
IsFaulted присвоить true и в свойство Exception записать исключение.
После создания класса обертки повторить первое задание только с использованием своего класса-обертки.

Решение:
+ 1. Создать класс ThreadWorker, который содержит:
 + поле типа Action<object>, которое проинициализируем в конструкторе;
 + свойство типа bool IsSuccess, в случае успешного выполнения асинхронной операции;
 + свойство типа bool IsCompleted, в случае завершения асинхронной операции;
 + свойство типа Exception для проброса исключения, если произойдет.
+ 2. Создать метод Start(object value), который в качестве параметра принимает обьект и запускает метод в контексте вторичного потока.
+ 3. Создать метод Wait(), который будет ожидать завершения потока. В теле метода используем конструкцию if, опрашиваем свойство IsCompleted, пока оно не станет true/
- 4. Создать метод ThreadExecute(), в котором в конструкции try/catch/finally запустить выполнение метода сообщенного с делегатом в контексте вторичного потока.
Если успешно, свойству isSuccess присваиваем true, если не успешно, заходим в блок catch(Exception ex), пробрасываем исключение, свойству isSuccess присваиваем false.
В блоке finally свойству isCompleted присваиваем true.
+ 5. В качестве метода сообщенным с делегатом Action<object> используем метод, который выводит в цикле символ - *.
+ 6. В методе Main() создаем обьект ThreadWorker и в конструктор передаем метод сообщенный с делегатом Action<object>.
+ 7. На экземпляре ThreadWorker вызываем метод Start(object obj), в который передаем наш символ - *;
+ 8. Паралельно в методе Main() имитируем работу выводя в цикле символ - #.
+ 9. На экземпляре вызываем метод Wait() и ждем завершение вторичного потока.
+10. После чего выводим строку, что метод Main() завершил свою работу.

