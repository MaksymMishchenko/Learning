Задача:
Создайте проект по шаблону "Console Application". Создайте класс-обертку для работы с классом
Thread. Класс-обертка, должен позволить выполнить экземпляр класса-делегата Action<object>
в контексте потока, созданного классом Thread. Он должен быть наделен свойствами bool
IsCompleted (для проверки на завершенность выполнения метода), bool IsSuccess (для проверки
на успешность выполнения), bool IsFaulted (для проверки на провал выполнения) и Exception
типа Exception (для получения исключения, которое произошло в контексте вторичного потока).
Реализуйте также методы Start и Wait. Метод Start будет запускать экземпляр класса-делегата
Action<object> на выполнение в контексте потока Thread. Метод Wait будет усыплять поток,
который его вызвал, пока класс-делегат Action<object> не завершит свою работу.
По завершению выполнения нужно присвоить свойству IsCompleted - true. Если выполнение
произошло без ошибок, свойству IsSuccess присвоить true, в противном случае - свойству
IsFaulted присвоить true и в свойство Exception записать исключение.
После создания классаобертки повторить первое задание только с использованием своего класса-обертки.

Решение:
1. Создать класс ThreadWorker с полем типа делегата Action<object>, который проинициализируем в конструкторе, свойствами типа bool IsCompleted, bool IsSuccess, bool IsFaulted и типа Exception.
2. Создать метод Start() и Wait() в классе ThreadWorker. В методе Start(string str) создать экземпляр класса Thread и в качестве параметра передать значение.
3. Создать метод Wait() в классе ThreadWorker, в котором проверять выполнение класс-делегат Action<object> в контексте вторичного потока. Также в этом методе пробросить исключение, если выполнение потока выполнено неуспешно.
4. Создать метод PrintHello(), который будет выполняться в контексте вторичного потока. 
5. В классе Program в методе Main() создать экземпляр класса ThreadWorker, в контструктор передать экземпляр класса-делегата Action<object> совмещенного с методом PrintHello().
6. На экземпляре класса ThreadWorker вызвать метод Start() и передать строку Hello
7. На экземпляре класса ThreadWorker вызвать метод Wait(), который отвечает за проверку выполнения потока. В случаем успешности отдаем управление основному потоку в Main(), в случае исключения выводим исключение на консоль.
8. В классе Program в методе Main() создаем цикл, который выводит в основном потоке символ-звездочку.
9. После выполнения вторичного потока в методе, выводим на консоль, что метод Main() завершил свою работу. 

 