Задание 3
Создайте проект по шаблону "Console Application". Создайте класс-обертку,
параметризированный указателем места заполнения типом TResult для работы с классом Thread.
Класс-обертка должен позволить выполнить метод, сообщенный с экземпляром класса-делегата
Func<object, TResult> в контексте потока, созданного классом Thread. Реализовать свойства: bool
IsCompleted, bool IsSuccess, bool IsFaulted, Exception типа Exception как в третьем задании.
Добавить свойство TResult Result, которое будет отдавать результат выполнения класса-делегата
Func<object, TResult> в контексте вторичного потока.
Если результат еще не готов, то нужно усыплять поток, который его запросил, пока результат не
станет доступным. Если выполнение было выполнено с ошибкой, свойство Result должно
вернуть ошибку, а не результат.
Проверьте работу вашего класса-обертки, создав в классе Program метод Calculate с
возвращаемым значением типа int и входящим параметром типа int с названием sleepTime. В
теле метода Calculate в цикле for, размерностью в 10 итераций, проинкрементируйте значение
переменной итерации цикла. На каждой итерации вызвать метод Sleep, усыпляя поток на
значение входящего параметра sleepTime.
Верните из метода Calculate результат сложения в цикле. Выполните метод Calculate в контексте
вашего класса-обертки. Пока результат не готов - выводите из метода Main на экран консоли
знаки восклицания. Воспользуйтесь свойством IsCompleted чтобы узнать готов ли результат.
Когда результат будет готов - выведите его на экран консоли.

Решение:
+ 1. Создать класс ThreadWorker<TResult> параметризированным указателем места заполенния типом TResult;
+ 2. Создать поля типа делегата Func<object, TResult> _func проинициализировав поле в конструкторе;
+ 3. В теле класса ThreadWorker<TResult> создать 4 свойства:
 + bool IsCompleted;
 + bool IsSuccess;
 + Exception exception;
 + TResult GetResult;
+ 3. Создать метод Start(), который запустит метод сообщенный с делегатом Func<object, TResult> _func в контексте вторичного потока;
+ 4. В свойстве в getter установить проверку в цикле while - если свойство isCompleted = false, то усыплять поток. Если свойство isCompleted = true - вернуть результат, иначе исключение.  
+ 5. В классе Program создаем метод Calculate(int sleepTime). Создаем временную переменную tempSum и присваиваем ей значение от икремента 10 итераций. Возвращаем сумму.
+ 6. Создать экземпляр класса ThreadWorker<TResult> и в конструктор передать метод Calculate, сообщие его с делегатом Func<object, Tresult>
+ 7. Создать в Main() цикл while(IsCompleted = false) и выводить знаки восклицания.